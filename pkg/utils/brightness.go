package utils

import (
	"image/color"
)

// Calculate the perceived brightness of the color given in the RGBA color space.
// https://stackoverflow.com/questions/596216/formula-to-determine-perceived-brightness-of-rgb-color
func CalculatePerceivedBrightness(c color.RGBA) float64 {
	luminance := calculateLuminance(c)

	if luminance <= 216.0/24389.0 {
		return (luminance * (24389.0 / 27.0)) / 100.0
	} else {
		return (luminanceRangeCubeRoot(luminance)*116.0 - 16.0) / 100.0
	}
}

// Calculate the luminance of a color given in the RGBA color space. Helper function used to calculate the perceived brightness.
func calculateLuminance(c color.RGBA) float64 {
	r, g, b := RgbaToIntComponents(c)

	rLinear := linearComponentLuminanceLookup[r]
	gLinear := linearComponentLuminanceLookup[g]
	bLinear := linearComponentLuminanceLookup[b]

	return rLinear*0.2126 + gLinear*0.7152 + bLinear*0.0722
}

// Calculate the linear value of a given RGB component. Helper function used to calculate the RGB luminance
// func calculateRgbComponentLinearValue(component float64) float64 {
// 	if component <= 0.04045 {
// 		return (component / 12.92)
// 	} else {
// 		// TODO: Implement custom function for this, just like with luminance cbrt
// 		return math.Pow((component+0.055)/1.055, 2.4)
// 	}
// }

// A third attempt to optimize the linear RGB component calculation optimization via approximation. A polynomial function with 5 roots has been
// created using polynomial regresion.The value from the calculated via the polynomial is further approximated using "Newton-Raphson method" (3 iterations)
// This method, despite the efforts, is still not precise enough and has been left here mainly as a curiosity.
// func rgbComponentLinearApproximation(component float64) float64 {
// 	if component <= 0.04045 {
// 		return (component / 12.92)
// 	}

// 	polynomial := func(x float64) float64 {
// 		x2 := x * x
// 		return (0.054078451133248 * x2 * x2 * x) - (0.224682405485073 * x2 * x2) + (0.594031158357391 * x2 * x) + (0.546897380766604 * x2) + (0.028604496057605 * x) + 0.001100839502532
// 	}

// 	derivative := func(x float64) float64 {
// 		x2 := x * x
// 		return (0.27039225566624 * x2 * x2) - (0.898729621940292 * x2 * x) + (1.78209347507217 * x2) + (1.09379476153321 * x) + 0.028604496057605
// 	}

// 	value := polynomial(component)
// 	for i := 0; i < 3; i += 1 {
// 		value = value - (polynomial(value) / derivative(value))
// 	}

// 	return value
// }

// The profiling showed that the brightness calculation is very slow beacuse of the cubic root operation on the luminance value.
// The analysis of the brightness calculation showed, that the cube root results are always in the range: 4/29 <= cbrt(luminance) <= 1
// We are using the "Newton-Raphson method" (3 iterations) to perform the cube root approximation. In order to get a precise initial value we are
// using a square polynomial (there is also a linear one...) with a formula obtained from a polynomial regression performed on the
// cube root X and Y values, where the X is in range between 4/29 and 1.
func luminanceRangeCubeRoot(x float64) float64 {
	// Cube root square polynomial approximation formula
	reg := (-0.358955950652834 * x * x) + (0.934309346877746 * x) + 0.414814427166639

	// Cube root linear approximation formula
	// req := 0.525842230617626*x + 0.508563748107305

	for i := 0; i < 3; i += 1 {
		regp2 := reg * reg
		reg = reg - ((regp2*reg)-x)/(3*regp2)
	}

	return reg
}

// An array whose indices in the 0-256 range are RGB component values, and the values within are pre-calculated linear RGB component values.
// Since benchmarks have shown that a large part of the application's running time is the repeated calculation of these values, it was decided
// to create such a lookup table. As a curiosity, it is worth mentioning that the tests showed that the program needs half the time for images
// with a resolution of 6000x4000.
var (
	linearComponentLuminanceLookup = [256]float64{
		0.0000000000000000,
		0.0003035269835488,
		0.0006070539670977,
		0.0009105809506465,
		0.0012141079341954,
		0.0015176349177442,
		0.0018211619012930,
		0.0021246888848419,
		0.0024282158683907,
		0.0027317428519395,
		0.0030352698354884,
		0.0033465357638992,
		0.0036765073240474,
		0.0040247170184963,
		0.0043914420374103,
		0.0047769534806937,
		0.0051815167023384,
		0.0056053916242027,
		0.0060488330228571,
		0.0065120907925945,
		0.0069954101872654,
		0.0074990320432262,
		0.0080231929853850,
		0.0085681256180693,
		0.0091340587022208,
		0.0097212173202379,
		0.0103298230296269,
		0.0109600940064882,
		0.0116122451797439,
		0.0122864883569159,
		0.0129830323421730,
		0.0137020830472897,
		0.0144438435960925,
		0.0152085144229127,
		0.0159962933655096,
		0.0168073757528874,
		0.0176419544883841,
		0.0185002201283797,
		0.0193823609569357,
		0.0202885630566524,
		0.0212190103760036,
		0.0221738847933874,
		0.0231533661781104,
		0.0241576324485048,
		0.0251868596273616,
		0.0262412218948499,
		0.0273208916390749,
		0.0284260395044208,
		0.0295568344378088,
		0.0307134437329936,
		0.0318960330730115,
		0.0331047665708851,
		0.0343398068086822,
		0.0356013148750203,
		0.0368894504011000,
		0.0382043715953465,
		0.0395462352767328,
		0.0409151969068532,
		0.0423114106208097,
		0.0437350292569735,
		0.0451862043856755,
		0.0466650863368801,
		0.0481718242268894,
		0.0497065659841272,
		0.0512694583740432,
		0.0528606470231803,
		0.0544802764424424,
		0.0561284900496001,
		0.0578054301910672,
		0.0595112381629812,
		0.0612460542316176,
		0.0630100176531677,
		0.0648032666929058,
		0.0666259386437729,
		0.0684781698444002,
		0.0703600956965959,
		0.0722718506823175,
		0.0742135683801496,
		0.0761853814813078,
		0.0781874218051863,
		0.0802198203144683,
		0.0822827071298148,
		0.0843762115441488,
		0.0865004620365498,
		0.0886555862857729,
		0.0908417111834077,
		0.0930589628466874,
		0.0953074666309647,
		0.0975873471418625,
		0.0998987282471139,
		0.1022417330881010,
		0.1046164840911040,
		0.1070231029782680,
		0.1094617107782990,
		0.1119324278369060,
		0.1144353738269740,
		0.1169706677585110,
		0.1195384279883460,
		0.1221387722296020,
		0.1247718175609500,
		0.1274376804356470,
		0.1301364766903640,
		0.1328683215538180,
		0.1356333296552060,
		0.1384316150324520,
		0.1412632911402720,
		0.1441284708580580,
		0.1470272664975950,
		0.1499597898106090,
		0.1529261519961500,
		0.1559264637078270,
		0.1589608350608800,
		0.1620293756391110,
		0.1651321945016680,
		0.1682694001896910,
		0.1714411007328230,
		0.1746474036555850,
		0.1778884159836290,
		0.1811642442498600,
		0.1844749945004410,
		0.1878207723006780,
		0.1912016827407910,
		0.1946178304415760,
		0.1980693195599490,
		0.2015562537943970,
		0.2050787363903170,
		0.2086368701452560,
		0.2122307574140550,
		0.2158605001138990,
		0.2195261997292690,
		0.2232279573168080,
		0.2269658735100980,
		0.2307400485243490,
		0.2345505821610050,
		0.2383975738122710,
		0.2422811224655550,
		0.2462013267078350,
		0.2501582847299530,
		0.2541520943308270,
		0.2581828529215960,
		0.2622506575296960,
		0.2663556048028620,
		0.2704977910130660,
		0.2746773120603850,
		0.2788942634768100,
		0.2831487404299920,
		0.2874408377269170,
		0.2917706498175360,
		0.2961382707983210,
		0.3005437944157760,
		0.3049873140698860,
		0.3094689228175080,
		0.3139887133757180,
		0.3185467781250920,
		0.3231432091129510,
		0.3277780980565420,
		0.3324515363461790,
		0.3371636150483300,
		0.3419144249086610,
		0.3467040563550300,
		0.3515325995004390,
		0.3564001441459430,
		0.3613067797835090,
		0.3662525955988390,
		0.3712376804741490,
		0.3762621229909060,
		0.3813260114325300,
		0.3864294337870490,
		0.3915724777497230,
		0.3967552307256270,
		0.4019777798321960,
		0.4072402119017370,
		0.4125426134839040,
		0.4178850708481370,
		0.4232676699860720,
		0.4286904966139070,
		0.4341536361747490,
		0.4396571738409190,
		0.4452011945162280,
		0.4507857828382230,
		0.4564110231804050,
		0.4620769996544070,
		0.4677837961121590,
		0.4735314961480100,
		0.4793201831008270,
		0.4851499400560700,
		0.4910208498478360,
		0.4969329950608700,
		0.5028864580325690,
		0.5088813208549340,
		0.5149176653765210,
		0.5209955732043540,
		0.5271151257058130,
		0.5332764040105050,
		0.5394794890121070,
		0.5457244613701860,
		0.5520114015120000,
		0.5583403896342680,
		0.5647115057049290,
		0.5711248294648730,
		0.5775804404296500,
		0.5840784178911640,
		0.5906188409193370,
		0.5972017883637630,
		0.6038273388553380,
		0.6104955708078650,
		0.6172065624196510,
		0.6239603916750760,
		0.6307571363461470,
		0.6375968739940330,
		0.6444796819705820,
		0.6514056374198240,
		0.6583748172794480,
		0.6653872982822720,
		0.6724431569576870,
		0.6795424696330940,
		0.6866853124353130,
		0.6938717612919900,
		0.7011018919329730,
		0.7083757798916870,
		0.7156935005064810,
		0.7230551289219690,
		0.7304607400903540,
		0.7379104087727310,
		0.7454042095403870,
		0.7529422167760780,
		0.7605245046752920,
		0.7681511472475070,
		0.7758222183174240,
		0.7835377915261940,
		0.7912979403326300,
		0.7991027380144090,
		0.8069522576692520,
		0.8148465722161010,
		0.8227857543962830,
		0.8307698767746550,
		0.8387990117407400,
		0.8468732315098580,
		0.8549926081242340,
		0.8631572134541020,
		0.8713671191987970,
		0.8796223968878320,
		0.8879231178819660,
		0.8962693533742660,
		0.9046611743911490,
		0.9130986517934190,
		0.9215818562772950,
		0.9301108583754240,
		0.9386857284578880,
		0.9473065367332000,
		0.9559733532492860,
		0.9646862478944650,
		0.9734452903984120,
		0.9822505503331170,
		0.9911020971138300,
		1.0000000000000000,
	}
)
